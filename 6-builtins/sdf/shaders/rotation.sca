precision highp float;
using namespace std;

// First we need to import the sdf module
#import <sdf>

vec4 main() {

  // For all sdf's we need uv's
  vec2 uv = fragment(getVertexTexCoord());

  // We need to aspect correct a few things in order to not have a skewed rotation
  float aspect = getRenderTargetSize().x / getRenderTargetSize().y;

  // aspect corrrect the uvs
  uv.x *= aspect;

  // aspect correct the positon
  vec2 position = vec2(0.5*aspect, 0.5);

  // FInd the size of a single texel
  vec2 texel = 1.0 / getRenderTargetSize();

  // Use the x value for both width and height
  vec2 size = texel.xx * 50.0;

  // Create our sdf function
  auto rectSdf = sdfRectangle(position, size);

  vec2 pivot = vec2(0.5*aspect, 0.5);

  // Our rotation will be continuously spinning
  float rotation = getTime();

  // Create our rotation
  auto rotationSdf = sdfRotation(rectSdf, pivot, rotation);

  // Create the shape and mask it
  float rect = rotationSdf(uv);

  // Using smoothstep will help us remove jagged aliasing on the edges during rotation
  rect = smoothstep(rect, rect + 0.0025, 0.0);

  // Output our rectangle
  return vec4(vec3(rect), 1.0);
}
