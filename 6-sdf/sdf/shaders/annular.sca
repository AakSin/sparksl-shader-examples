precision highp float;
using namespace std;

// First we need to import the sdf module
#import <sdf>


// In this example I show what the annular function does
vec4 main() {

  // For all sdf's we need uv's
  vec2 uv = fragment(getVertexTexCoord());

  // We need to aspect correct a few things in order to not have a skewed rotation
  float aspect = getRenderTargetSize().x / getRenderTargetSize().y;

  // aspect corrrect the uvs
  uv.x *= aspect;

  // aspect correct the positon
  vec2 position = vec2(0.5*aspect, 0.5);

  // FInd the size of a single texel
  vec2 texel = 1.0 / getRenderTargetSize();

  // Use the x value for both width and height
  vec2 size = texel.xx * 50.0;

  // Create our sdf function
  auto starSdf = sdfStarSharp(position, size.x, size.x + 0.1, 10.0);

  // The annular function will make an outline from an sdf shape
  auto annular = sdfAnnular(starSdf, 0.01);

  // Call the annular function
  float sdf = annular(uv);

  // Soften the edges
  sdf = smoothstep(sdf, sdf+0.0025, 0.0);

  // Output our shape
  return vec4(vec3(sdf), 1.0);
}
